{
    
    "docinfo":{
        "name":"config_doc_2.json",
        "author":"Phil Wilshire",
        "desc":"test the readme",
        "date":"04_14_2023"
    },
    "meta": {
		"note": "all big fields (templates, inputs, filters, outputs, metrics, echo) are optional",
		"publishRate": 1000
    },
	"templates": [
		{
			"type": "sequential",
			"from": 1,
			"to": 16,
			"step": 3,
			"token": "##"
        },
		{
			"type": "list",
			"list": ["bobcat", "cheetah", "lion"],
			"token": "qq"
        }
	],
    "inputs": {
        "var_name1": { "uri": "/components/bms_74b/vnom", "type": "float", "default": 5.0            },
        "var_name2": { "uri": "/components/feeder_52m1/v2", "type": "float"            },
        "var_name2.1": { "uri": "/components/feeder_52m1/v2.1", "type": "float"            },
        "var_name2.2": { "uri": "/components/feeder_52m1/v2.2", "type": "float"            },
        "var_name2.3": { "uri": "/components/feeder_52m1/v2.3", "type": "float" ,"attributes":["enabled", "scale"]  },
        "var_name3": { "uri": "/components/feeder_52m1/id", "type": "string"            },
        "var_name4": { "uri": "/components/feeder_52u1/pmax", "type": "bool"            },
        "var_name5": { "uri": "/components/bms_74b/id", "type": "string", "attributes":["enabled", "scale"]          },
		"intermediate_input":{"internal":true, "type":"int"}
    },
    "filters": {
        "all_vars_enabled": "regex(var_name*) | type(float) | attribute(enabled == true) ",
        "all_vars_enabled_fail": "regex(var_name*)  | attribute(enabled == true) | type(float)",
        "all_float_vars": "regex(var_name*) | type(float)",
        "all_vars": "regex(var_name*)"
    },
    "outputs": {
        "output##_qq": { "uri": "/some/output##", "flags": [ "clothed", "group1","clothed"], "publishRate": 1000, "attributes": {"scale": 1000, "units": "deg C", "ui_type": "none"}},
        "output##": { "name":"timestamp","uri": "/some/output##", "flags": ["group2"] },
		"level2_output": { "uri": "/some/level2"},
		"var_output": { "uri": "/some/vars"},
		"some_var_output": { "uri": "/some/vars"},
		"enabled_var_output": { "uri": "/some/vars"},
		"enabled_var_output2": { "uri": "/some/vars2"},
		"all_var_output": { "uri": "/some/vars3"},
        
		"enum_output": {
						"name": "status", "uri": "/some/status/output", "flags": ["enum"],
						"enum": [
							"Power up",
							"Initialization",
							{"value": 10,"string": "Off", "note": "the next enum string has an implicit value of 11", "note2": "can skip values for enums but not bitfields"},
							"Precharge",
							{"value":20, "string":"some other value"}
						]
					},
		"bitfield_output": {
			"name": "status2", "uri": "/some/status/output","flags": ["bitfield"],
			"bitfield": [
				"Power up",
				"Initialization",
				"Off",
				"Precharge"
			]
		}
		    },
    "metrics": [
        {
            "value": 0.0, 
            "outputs": "var_output",
            "expression": "Add(all_float_vars)"
        },
        {
            "value": 0.0, 
            "outputs": "enabled_var_output",
            "expression": "Add(all_vars_enabled)"
        },
        {
            "value": 0.0, 
            "outputs": "enabled_var_output2",
            "expression": "Add(all_vars_enabled_fail)"
        },
        {
            "value": 0.0, 
            "outputs": "all_var_output",
            "expression": "Add(all_vars)"
        },
        {
            "value": 0.0, 
            "outputs": "some_var_output",
            "expression": "Add(all_float_vars)"
        },
        {
            "value": 0.0, 
            "outputs": ["output##_qq@scale"],
            "expression": "If(var_name5@enabled < 5, 100, 150)"
        },
        {
            "value": "", 
            "outputs": "output##",
            "expression": "MillisecondsToRFC3339(Time())"
        },
		{
            "value": 0, 
            "outputs": "enum_output",
            "expression": "3"
        },
		{
            "value": 0, 
            "outputs": "bitfield_output",
            "expression": "true | false << 1 | true << 2 | true << 3"
        },
		{
            "value": 0, 
            "internal_output": "intermediate_input",
            "expression": "5"
        },
		{
            "value": 0, 
            "outputs": "level2_output",
            "expression": "intermediate_input*5"
        }
    ],
    "echo": [
		{
			"uri": "/components/sel_735",
			"publishRate": 1000,
			"format": "naked",
			"inputs": [
				{
					"uri": "/components/feeder",
					"registers": {
						"f": {"source": "frequency", "default": 60},
						"p": {"source":"active_power", "default":100},
						"pf": "power_factor",
						"q": "reactive_power",
						"v": "voltage_l1",
						"tv##": "tv##voltage_l1",
						"v1": "voltage_l2",
						"v2": "voltage_l3",
						"s1": {"source":"string_uri_element", "default": "some value for the string"},
						"b1": {"source":"bool_uri_element", "default": true}
					}
				}
			],
			"echo": {
				"apparent_power": 0,
				"current_l1": 0,
				"current_l2": 0,
				"current_l3": 0,
				"current_n": 0,
				"kvarh_delivered": 0,
				"kvarh_received": 0,
				"kwh_delivered": 0,
				"kwh_received": 0,
				"thd_i_l1": 0,
				"thd_i_l2": 0,
				"thd_i_l3": 0,
				"thd_v_l1": 0,
				"thd_v_l2": 0,
				"thd_v_l3": 0,
				"voltage_l1_l2": 0,
				"voltage_l2_l3": 0,
				"voltage_l3_l1": 0,
                "myoutput##_qq":300
			}
		}
	]
}