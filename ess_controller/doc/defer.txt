#include "fmt/core.h"

// NOTE(WALKER): This struct contains a lambda (through template deduction) which is called through its destructor at end of scope
// this is also refered to as a "scopeGuard"
// and is taken as inspiration from Andre Alexandrescu in this video:
// https://www.youtube.com/watch?v=kaI4R0Ng4E8
// it is simplified because it uses c++17 by default so it contains less boilerplate (less intermediate structs to get around template deduction)
template<typename Defer_Lambda>
struct deferGuard {
    Defer_Lambda defer_code; // this is a lambda

    constexpr deferGuard(Defer_Lambda&& code) noexcept : defer_code(code) {} // initialize defer_code
    ~deferGuard() { defer_code(); } // execute defer_code

    // no copies or moves:
    deferGuard(const deferGuard&) = delete;
    void operator=(const deferGuard&) = delete;
    deferGuard(deferGuard&&) = delete;
    void operator=(deferGuard&&) = delete;
};

// this is used to generate a unique name and mangle it for the compiler (aka: CONCATINATE):
#define GENERATE_NAME(x,y) x##y
// this is the actual defer macro which generates a lambda to be stored in the deferGuard struct:
#define defer const deferGuard GENERATE_NAME(defer__, __LINE__) = [&]()

// defer like in golang
// this is really the granddaddy of golang's defer written all the way back in the year 2000 by Andre Alexandrescu
int main() {
    defer {
        fmt::print("hello defer world\n");
    }; // don't forget the semi-colon!!!
    fmt::print("hello normal world\n");
}
