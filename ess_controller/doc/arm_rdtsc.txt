


volatile unsigned cc;
static int init = 0;
if(!init) {
  __asm__ __volatile__ ("mcr p15, 0, %0, c9, c12, 2" :: "r"(1<<31)); /* stop the cc */
  __asm__ __volatile__ ("mcr p15, 0, %0, c9, c12, 0" :: "r"(5));     /* initialize */
  __asm__ __volatile__ ("mcr p15, 0, %0, c9, c12, 1" :: "r"(1<<31)); /* start the cc */
  init = 1;
}
__asm__ __volatile__ ("mrc p15, 0, %0, c9, c13, 0" : "=r"(cc));
return cc;


===================================
#include <stdio.h>
#include <stdlib.h>
#include <errno.h>
#include <string.h>
#include <sys/syscall.h>
#include <linux/perf_event.h>

unsigned long long getticks(void)
{
  static int fd,init = 0;
  static struct perf_event_attr attr;
  static unsigned long long buffer;

  if(!init) {
    attr.type = PERF_TYPE_HARDWARE;
    attr.config = PERF_COUNT_HW_CPU_CYCLES;
    fd = syscall(__NR_perf_event_open, &attr, 0, -1, -1, 0);
    if(fd < 0) {
      fprintf(stderr,"ERROR - Cannot open perf event file descriptor:\n");
      if(errno == -EPERM || errno == -EACCES)
        fprintf(stderr,"  Permission denied.\n");
      else if(errno == ENOENT)
        fprintf(stderr,"  PERF_COUNT_HW_CPU_CYCLES event is not supported.\n");
      else
        fprintf(stderr,"  Attempting to open the file descriptor returned %d (%s).\n",errno, strerror(errno));
      exit(-1);
    }
    init = 1;
  }
  read(fd,&buffer,sizeof(unsigned long long));
  return buffer;
}

int main(void)
{
  int i;
  printf("Preparing to test the perf event cycle counter.\n\n");
  printf("An \"illegal instruction\" error during this test indicates\n");
  printf("that the cycle counter is not available.\n\n");
  printf("If the perf event cycle counter works on your system, you should now see\n");
  printf("10 different cycle counts in the right hand column below.\n");
  for(i=1;i<=10;i++)
    printf(" %2i: %20Ld\n",i,getticks());
  printf("Perf event cycle counter read test complete.\n");
  printf("To use this counter in FFTW-NEON, use the configure option\n");
  printf("  --enable-perf-events\n");
}
===============

#include <stdio.h>

unsigned getticks(void)
{
     unsigned cc;
     static int init = 0;
     if(!init) {
         __asm__ __volatile__ ("mcr p15, 0, %0, c9, c12, 2" :: "r"(1<<31)); /* stop the cc */
         __asm__ __volatile__ ("mcr p15, 0, %0, c9, c12, 0" :: "r"(5));     /* initialize */
         __asm__ __volatile__ ("mcr p15, 0, %0, c9, c12, 1" :: "r"(1<<31)); /* start the cc */
         init = 1;
     }

     __asm__ __volatile__ ("mrc p15, 0, %0, c9, c13, 0" : "=r"(cc));
     return cc;
}

int main(void)
{
  int i;
  printf("Preparing to test the ARMv7a cycle counter.\n\n");
  printf("An \"illegal instruction\" error during this test indicates\n");
  printf("that the cycle counter is not available.\n\n");
  printf("If the ARMv7a cycle counter works on your system, you should now see\n");
  printf("10 different cycle counts in the right hand column below.\n");
  for(i=1;i<=10;i++) {
    printf(" %2i: %20d\n",i,getticks());
  }
  printf("ARMv7a cycle counter read test complete.\n");
  printf("To use this counter in FFTW-NEON, use the configure option\n");
  printf("  --enable-armv7a-cycle-counter\n");

}
==========================================

long long GetSeed( void )
{
#ifdef __arm__
	struct timeval currentTime;
	gettimeofday(&currentTime, NULL);
	long microsecond_time = (currentTime.tv_sec * (int)1e6 + currentTime.tv_usec) % __LONG_MAX__;
	long long seed = microsecond_time*getpid() % __LONG_LONG_MAX__;
	return seed;
#else
	long long result;
	asm ("RDTSC" : "=A" (result));
	return result;
#endif
}


#include <sys/types.h>
#include <unistd.h>
#include <stdio.h>
#include <sys/syscall.h>
#include <sys/time.h>

unsigned getticks(void)
{
     unsigned cc;
     static int init = 0;
     if(!init) {
         __asm__ __volatile__ ("mcr p15, 0, %0, c9, c12, 2" :: "r"(1<<31)); /* stop the cc */
         __asm__ __volatile__ ("mcr p15, 0, %0, c9, c12, 0" :: "r"(5));     /* initialize */
         __asm__ __volatile__ ("mcr p15, 0, %0, c9, c12, 1" :: "r"(1<<31)); /* start the cc */
         init = 1;
     }

     __asm__ __volatile__ ("mrc p15, 0, %0, c9, c13, 0" : "=r"(cc));
     return cc;
}

long long GetSeed( void )
{
#ifdef __arm__
        struct timeval currentTime;
        gettimeofday(&currentTime, NULL);
        long microsecond_time = (currentTime.tv_sec * (int)1e6 + currentTime.tv_usec) % __LONG_MAX__;
        long long seed = microsecond_time*getpid() % __LONG_LONG_MAX__;
        return microsecond_time;
        return seed;
#else
        long long result;
        asm ("RDTSC" : "=A" (result));
        return result;
#endif
}

int main(void)
{
  int i;
  long long ix[20];

  for(i=0;i<=10;i++) {
        ix[i] = GetSeed();
  }

  for(i=1;i<=10;i++) {
    printf(" %2i: %20llu %20llu\n",i, ix[i] , ix[i] - ix[i-1]);
  }

  printf("Preparing to test the ARMv7a cycle counter.\n\n");
  printf("An \"illegal instruction\" error during this test indicates\n");
  printf("that the cycle counter is not available.\n\n");
  printf("If the ARMv7a cycle counter works on your system, you should now see\n");
  printf("10 different cycle counts in the right hand column below.\n");
  for(i=1;i<=10;i++) {
    printf(" %2i: %20d\n",i,getticks());
  }
  printf("ARMv7a cycle counter read test complete.\n");
  printf("To use this counter in FFTW-NEON, use the configure option\n");
  printf("  --enable-armv7a-cycle-counter\n");
}


pi@pi4409:~/work/perf $ ./t
  1:           1748159251                   47
  2:           1748159253                    2
  3:           1748159255                    2
  4:           1748159257                    2
  5:           1748159259                    2
  6:           1748159261                    2
  7:           1748159263                    2
  8:           1748159265                    2
  9:           1748159267                    2
 10:           1748159269                    2


# best of all 
###################################
  cat ticks3.c
#include <sys/types.h>
#include <unistd.h>
#include <stdio.h>
#include <sys/syscall.h>
#include <sys/time.h>

unsigned getticks(void)
{
     unsigned cc;
     static int init = 0;
     if(!init) {
         __asm__ __volatile__ ("mcr p15, 0, %0, c9, c12, 2" :: "r"(1<<31)); /* stop the cc */
         __asm__ __volatile__ ("mcr p15, 0, %0, c9, c12, 0" :: "r"(5));     /* initialize */
         __asm__ __volatile__ ("mcr p15, 0, %0, c9, c12, 1" :: "r"(1<<31)); /* start the cc */
         init = 1;
     }

     __asm__ __volatile__ ("mrc p15, 0, %0, c9, c13, 0" : "=r"(cc));
     return cc;
}

long long GetSeed( void )
{
#ifdef __arm__
        struct timeval currentTime;
        gettimeofday(&currentTime, NULL);
        long microsecond_time = (currentTime.tv_sec * (int)1e6 + currentTime.tv_usec) % __LONG_MAX__;
        long long seed = microsecond_time*getpid() % __LONG_LONG_MAX__;
        return microsecond_time;
        return seed;
#else
        long long result;
        asm ("RDTSC" : "=A" (result));
        return result;
#endif
}
long long uSeed( void )
{
#ifdef __arm__
        static long long tsc;
        static long long rsc;
        struct timeval currentTime;

        gettimeofday(&currentTime, NULL);
        if (rsc != currentTime.tv_sec)
        {
           rsc = currentTime.tv_sec;
           tsc =  (currentTime.tv_sec * (int)1e6);
        }

        long long microsecond_time = tsc + currentTime.tv_usec;
        return microsecond_time;
#else
        long long result;
        asm ("RDTSC" : "=A" (result));
        return result;
#endif
}

int main(void)
{
  int i;
  long long ix[20];

  for(i=0;i<=10;i++) {
        ix[i] = GetSeed();
  }

  for(i=1;i<=10;i++) {
    printf(" %2i: %20llu %20llu\n",i, ix[i] , ix[i] - ix[i-1]);
  }
  for(i=0;i<=10;i++) {
        ix[i] = uSeed();
  }

  for(i=1;i<=10;i++) {
    printf(" %2i: %20llu %20llu\n",i, ix[i] , ix[i] - ix[i-1]);
  }

  printf("Preparing to test the ARMv7a cycle counter.\n\n");
  printf("An \"illegal instruction\" error during this test indicates\n");
  printf("that the cycle counter is not available.\n\n");
  printf("If the ARMv7a cycle counter works on your system, you should now see\n");
  printf("10 different cycle counts in the right hand column below.\n");
  for(i=1;i<=10;i++) {
    printf(" %2i: %20d\n",i,getticks());
  }
  printf("ARMv7a cycle counter read test complete.\n");
  printf("To use this counter in FFTW-NEON, use the configure option\n");
  printf("  --enable-armv7a-cycle-counter\n");
}

pi@pi4409:~/work/perf $ ./t
  1: 18446744071744325089                   48
  2: 18446744071744325091                    2
  3: 18446744071744325093                    2
  4: 18446744071744325095                    2
  5: 18446744071744325097                    2
  6: 18446744071744325099                    2
  7: 18446744071744325101                    2
  8: 18446744071744325103                    2
  9: 18446744071744325105                    2
 10: 18446744071744325106                    1


  1: 18446744071744325761                    2
  2: 18446744071744325762                    1
  3: 18446744071744325763                    1
  4: 18446744071744325764                    1
  5: 18446744071744325765                    1
  6: 18446744071744325766                    1
  7: 18446744071744325767                    1
  8: 18446744071744325768                    1
  9: 18446744071744325769                    1
 10: 18446744071744325770                    1

another idea 

/*
 * This program calculates the time required to
 * execute the program specified as its first argument.
 * The time is printed in seconds, on standard out.
 */
#include <stdio.h>
#include <unistd.h>
#include <stdlib.h>
#include <time.h>

#define BILLION  1000000000L;

int main( int argc, char **argv )
  {
    struct timespec start, stop;
    double accum;

    if( clock_gettime( CLOCK_REALTIME, &start) == -1 ) {
      perror( "clock gettime" );
      exit( EXIT_FAILURE );
    }

    system( argv[1] );

    if( clock_gettime( CLOCK_REALTIME, &stop) == -1 ) {
      perror( "clock gettime" );
      exit( EXIT_FAILURE );
    }

    accum = ( stop.tv_sec - start.tv_sec )
          + ( stop.tv_nsec - start.tv_nsec )
            / BILLION;
    printf( "%lf\n", accum );
    return( EXIT_SUCCESS );
  }


