assetLists etc
Phil Wilshire 10/31/2020

vectors

AssetLists serve two purposes.
1/ to keep an orderered arrangement of items for example ui elements
2/ to provide a multitable cross reference for items.


 we'll try to use them for logs, alarms and faults as well.
*
 * aset lists tests
 * this one uses the featdict and has scale, offset features* 
 * Basic use of different lists in the system.
 * The key goal is to get the system to load aan asset var(s) or some var params on demand
 * For example set  mode gridfollow then load a bunch of variables from a file (or a DB) 
 * First we review some of the list uses in the current development model of the ess_controller
 * We get a list of pubs etc.
 * Here is the code used.
 * 
 * typedef std::map<std::string, std::map<std::string, assetVar*>> varsmap;
 * typedef std::map<std::string, std::vector<std::string>*>vecmap;
 *  varsmap vmap;
    varsmap pmap;
 *  vecmap vecs;
 *  int ccnt;
 * 
 *  vm->getVList(vecs, vmap, ess_man->amap, "ess", "Blocks", ccnt);
 *  vm->getVList(vecs, vmap, ess_man->amap, "ess", "Pubs", ccnt);
 * These populate vecs with lists of strings based on the contents of /config/ess/Pubs  , /config/ess/Subs
 * here is the contents of vec after these operations.
 * main >>  >>>>>>>>>>>>>start of vecs
 *  * showvecMap key [Pubs] > entry [0] is [/status/ess]
 * showvecMap key [Pubs] > entry [1] is [/variables/ess]
 * showvecMap key [Pubs] > entry [2] is [/config/ess]
 * showvecMap key [Pubs] > entry [3] is [/params/ess]
 * showvecMap key [Pubs] > entry [4] is [/status/ess]
 * showvecMap key [Pubs] > entry [5] is [/variables/ess]
 * showvecMap key [Pubs] > entry [6] is [/config/ess]
 * showvecMap key [Pubs] > entry [7] is [/params/ess]
 * showvecMap key [Subs] > entry [0] is [/ess]
 * showvecMap key [Subs] > entry [1] is [/components]
 * showvecMap key [Subs] > entry [2] is [/assets]
 * showvecMap key [Subs] > entry [3] is [/params]
 * showvecMap key [Subs] > entry [4] is [/status]
 * showvecMap key [Subs] > entry [5] is [/controls]
 * showvecMap key [Subs] > entry [6] is [/variables]
 * showvecMap key [Subs] > entry [7] is [/config]
 * showvecMap key [Subs] > entry [8] is [/tests]
 * showvecMap key [Subs] > entry [9] is [/default]
 * showvecMap key [Subs] > entry [10] is [/reload]
 * showvecMap key [Subs] > entry [11] is [/misc2]
 * showvecMap key [Subs] > entry [12] is [/ess]
 * showvecMap key [Subs] > entry [13] is [/components]
 * showvecMap key [Subs] > entry [14] is [/assets]
 * showvecMap key [Subs] > entry [15] is [/params]
 * showvecMap key [Subs] > entry [16] is [/status]
 * showvecMap key [Subs] > entry [17] is [/controls]
 * showvecMap key [Subs] > entry [18] is [/variables]
 * showvecMap key [Subs] > entry [19] is [/config]
 * showvecMap key [Subs] > entry [20] is [/tests]
 * showvecMap key [Subs] > entry [21] is [/default]
 * showvecMap key [Subs] > entry [22] is [/reload]
 * showvecMap key [Subs] > entry [23] is [/misc2]
 * main >> <<<<<<<<<<<<<<end of vecs
 * 

 *  char **subs2 = vm->getList(vecs, vmap, ess_man->amap, "ess", "Subs", ccnt);
 * 
 * The entry in the config file is like this:
 * 
 * "/config/ess": {
 *   "Subs": "/ess /components, /assets, /params, /status, /controls, /variables, /config, /tests, /default, /reload, /misc2 ",
 *   "Pubs": "/status/ess, /variables/ess, /config/ess, /params/ess ",
 *   "BlockSets": "/status/ess, /status/bms, /status/bms_1, /status/bms_2 "
 * },
 * The vecmap will contain a list of strings associated with the key word (s) Subs, Pubs, BlockSets etc 
 * The varsmap will contain a list of named assets associated with an asset name 
 * you can examine the list as follows.
 * vm->showList(subs2,"ess", ccnt);
 * 
 * The Subs list is used when setting up the FIMS connection.
 * 
 * here is it working
 * getListStr >> recovered [Subs] as [/ess /components, /assets, /params, /status, /controls, /variables, /config, /tests, /default, /reload, /misc2 ]
 * showList subs [ess] [0] = [/ess]
 * showList subs [ess] [1] = [/components]
 * showList subs [ess] [2] = [/assets]
 * showList subs [ess] [3] = [/params]
 * showList subs [ess] [4] = [/status]
 * showList subs [ess] [5] = [/controls]
 * showList subs [ess] [6] = [/variables]
 * showList subs [ess] [7] = [/config]
 * showList subs [ess] [8] = [/tests]
 * showList subs [ess] [9] = [/default]
 * showList subs [ess] [10] = [/reload]
 * showList subs [ess] [11] = [/misc2]
 * 
 * 
 *   ess_man->run_fims(1500, (char **)subs2, "essMan", ccnt);
 *
 * The Pubs list is used when  
 *  ess_man->setVmap(&vmap);
 *  ess_man->setPmap(&pmap); // pubs map 
 * 
 * The key to getting the pubs working id copying the list of tables to pmap.
 * There should be a VarMapUtils function for this.
 * 
 * And here is the way the pmap gets sent as a pub
 * * the pmap just contains a list of comps to send out in the pub.
 * 
 *   am->vm->vListPartialSendFims(*am->vmap, *am->pmap, "pub", am->p_fims);
 * A pub on /assets/ will also find /assets/bms/bms_1  etc.

 * This still needs to be done.
 * 
 *  vLists
 *   These are a cool way to sent a block of sets or pubs to Fims from inside  func.
 * The selected vars  can be sent to their default locations (defined by the comp element) or to an optional  different location(and :var)
 * They are mini varsmaps and can be created and deleted. 
 *   
 * 
 * varsmap *vlist = am->vm->createVlist();
 * am->vm->addVlist(vlist, amap["lastActiveCurrentSetpoint"],"/components/pcr/pcr_1:lastSetpoint");
 * am->vm->addVlist(vlist, amap["pcs_ActiveCurrent"]                                             );
 * am->vm->addVlist(vlist, amap["lastReactiveCurrentSetpoint"]                                   );
 * am->vm->addVlist(vlist, amap["pcs_ReactiveCurrent"]                                           );
 * am->vm->sendVlist(p_fims, "set", vlist);
 * am->vm->clearVlist(vlist);
 * 
 * The last (for now)  list to consider is the assetList.
 * This was created to maintain the order of a config file so that it can be used for a consistent UI presentation.
 * it is saved in varsmap as "_assetList/uri"
 *     contains the order of assetVars for publish.
 * its a "normal" assetVar with a value (bool at the moment) with a special component  an assetlist type
 * 
 * typedef std::vector<assetVar*>  assetlist;
 *  
 * When parsing the config file, the assetList iscreated as a named collection of assetVars.
 * When wanting to publish the list we just simply run through the list and produce the cjson objects.
 * 
 *  assetList* alist = getAlist(vmap, newuri);
 *               if(alist)
 *               {
 *                   unsigned int ix = 0;
 *                   assetVar* av;
 *                   do
 *                   {
 *                       av = alist->avAt(ix++);  // returns nullptr when the list is done.
 *                       if(av) av->showvarCJ(cji, opts);
 *                   } while(av);
 *               }
 * currently any "get" operation that just includes a uri will in fact first look for an asset list to define 
 * the list of assetVars to be presented.
 * This is, in effect, a viable interface. 
 * 
 * So how do we make an assetList
 * 
 * There is a VarMapUtils function for this. The uri can be any string. but they need to be unique.
 * 
 *   assetList* setAlist(varsmap& vmap, const char* uri)  (vm.setAlist....)
 * 
 * We can recover an asset list, if one exists, like this. 
 * 
 *  assetList* alist = getAlist(vmap, uri);    (vm.getAlsit ....)
 * 
 * How do we add assets to the assetList
 * 
 * The asset list class has an add ( there is no delete yet)
 * 
 * void add(assetVar* av)
 *    {
 *       unsigned int ix = aList.size();
 *       for (unsigned int i = 0; i < ix; i++)
 *       {
 *           if (aList[i] == av) 
 *               return;
 *       }
 *       aList.push_back(av);
 *   }
 * 
 * So once you have tour list simply add assets to it. They will be placed in the cJSON file in order.
 * 
 *   alist->add(av);
 * 
 * A getMapsCj with the created uri   is all you need
 * 
 * cJSON* getMapsCj(varsmap &vmap , const char* uri = nullptr, const char* var = nullptr, int opts = 0)
 * 
 * 
 * The other use for asset lists is to collect assetVars suitable to drop into or read from a file or DB.
 * Ideally this will done in a config file but it could be in a Func.
 * This config file option is the best but we have to make it so that the assets are mapped correctly.
 * 
 * /asset/bms/bms_1/MaxVoltageLimit
 * Asset lists are "hidden" in the varsmap with a '_' prefix to the name
 * 
 *  "_/assets/ess/ess_1":   {
 *               "assetList":    {
 *                       "value":        true
 *               }
 *       }
 *
 * so how about this
 * 
 * "/config/bms/bms_1": {
 *    "/asset/bms/bms_1/MaxLimits": "/asset/bms/bms_1:MaxVoltageLimit, /asset/bms/bms_1:MaxCurrentLimit ..." 
 *   "AssetLists": "/asset/bms/bms_1/MaxLimits, /asset/bms/bms_1/DischargeLimits",
 *   "BlockSets": "/status/ess, /status/bms, /status/bms_1, /status/bms_2 "
 * },

 * We use the "AssetLists" keyword to get a list of the lists. then process the lists specified from that string
 * Lets simply put the string into the assetList object at this time.
 * The first time the assetList is used it will translate  the string into the actual assetVars.
 * This will allow late runtime binding after the config is all set up.
 * Any vars in the list not in the config wil have to be created. But what is the type for those. 
 * We'll  have an undefined type perhaps and then set the type on the first value set. 
 *
 * VarMapUtils will have functions to Load / Unload assetlists using files.
 * Infact load is just a simple config .. its all the same
 * 
 * vm->configure_vmap(vmap, "saved_configs/some_file");//, nullptr, ess_man);
 *
 * The file write will be also quite simple.
 *
        cJSON *cjbm = nullptr;
        cjbm = vm->getMapsCj(vmap, <asset name>);
        const char* fname =  "saved_configs/asset_name/asset_instance";
        vm->write_cjson(fname, cjbm);
        cJSON_Delete(cjbm);
 *
 * We'll create a simple varMapUtils opweation for this 
 * 
 * vm.writeAsset(asset_name, asset_instance)  
 * This will be performed by a set on a regular assetVar with the asset_instance as the string.
 * set /asset/bms/bms_1/assetSave "<asset_list>/during_precharge" 
 * set /asset/bms/bms_1/assetLoad "<asset_list>/during_precharge" 
 * 
 *  Now for the code , thankfully its not too much.   
 */