#Add any required envvar overrides to this file, it is sourced from /etc/profile
#export PATH=/usr/local/bin/fims:$PATH
fSend=/usr/local/bin/fims_send

helpSetup()
{
    echo "Ess Controler Amaresco Test operations:-"
    echo "                      Target:          ameresco"
    echo "                      version:         10.1-rc-1"
    echo "                      date:            01/28/2022"
    echo
    echo
    #echo "showPS:                       show running processes"
    #echo "reset_ess:                    restart the ess_controller with (large) log sent to /home/config/log/ess_controller.log"
    #echo "resetUser:                    reset the user , takes effect on the next container restart"
    echo "load_base:                    load up base config"
    echo "load_ess:                     load up ess config"
    echo "load_bms:                     load up bms config"
    echo "load_bms_tmpl:                load up bms tmpl"
    echo "load_bms_controls:            load up bms controls"
    echo "load_bms_modbus:              load up bms modbus config"
    echo "load_bms_modbus_tmpl:         load up bms modbus tmpl"
    echo "load_pcs:                     load up pcs config"
    echo "load_pcs_controls:            load up pcs controls"
    echo "load_pcs_modbus:              load up pcs modbus config"
    echo "load_site:                    load up site interface"
    echo "load_final:                   load up ess_final"
    echo "stop_all_pubs:                stop all pubs"
    echo "start_ess_pubs:                start ess  pubs"
    echo "start_bms_pubs:                start bms  pubs"
    echo "start_pcs_pubs:                start pcs  pubs"

    #echo "defRacks:                     set all rack data to some default values"
    #echo "defBms:                       set Bms data to some default values"
    #echo "defPcs:                       set Pcs data to some default values"
    echo
    echo "get/setBmsInfo:               get / set bmsInfo values (getBmsInfo foo | jq to see a list of options)"
    echo "get/setPcsInfo:               get / set pcsInfo values (getPcsInfo foo | jq to see a list of options)"
    echo
    #echo "bmsOn:                        set bms state to On"
    #echo "bmsStarting:                  set bms state to Starting"
    #echo "bmsFault:                     set bms state to Fault"
    #echo "bmsCommsOK:                   set bms Comms state to OK"
    echo
    ##echo "runContactorSim:              run/stop the Contactor Sim in the background"
    #echo "runEnableRackSim:             run/stop the Enable Rack Sim in the background"              
    #echo "runHbSim:                     run/stop the HB Sim in the background"              
    #echo "runPcsCtrlSim:                run/stop the pcs control sim in the background"
    #echo "runPowerCmdSim:               run/stop the pcs command sim in the background"
    #echo "runChargeDischargeSim:        run/stop the bms charge/discharge sim in the background"
}

showPS()
{
    ps -ax
}
# Helper function for doing a fims set
#
# $1 = uri and/or variable name (ex.: /components/catl_mbmu_control_r or /components/catl_mbmu_control_r/mbmu_max_cell_voltage)
# $2 = value to set
fimsSet()
{
    $fSend -m set -u $1 $2 -r /me | jq
}
fimsSetNoReply()
{
    $fSend -m set -u $1 $2
}
fimsSetWithFile()
{
    $fSend -m set -f $1 -u $2 -r /me | jq
}
# Helper function for doing a fims pub
#
# $1 = uri and/or variable name (ex.: /components/catl_mbmu_control_r or /components/catl_mbmu_control_r/mbmu_max_cell_voltage)
# $2 = value to set
fimsPub()
{
    $fSend -m pub -u $1 $2
}
# Helper function for doing a fims get
#
# $1 = uri and/or variable name (ex.: /components/catl_mbmu_control_r or /components/catl_mbmu_control_r/mbmu_max_cell_voltage)
fimsGet()
{
    $fSend -m get -u $1 -r /me | jq
}


export cfg_dir=/home/vagrant/docker_testing/ess/configs_split/ess_controller
export Sys=ess

load_base()
{
    fims_send -f $cfg_dir/ess_config_lg.json            -m set  -u /$Sys/cfg/cfile/$Sys/ess_config_lg
}

load_ess()
{
    fims_send -f $cfg_dir/ess_controller.json           -m set  -u /$Sys/cfg/cfile/$Sys/ess_controller
}

load_bms()
{
    fims_send -f $cfg_dir/lg_bms_manager.json           -m set  -u /$Sys/cfg/cfile/$Sys/lg_bms_manager
}

load_bms_tmpl()
{
    fims_send -f $cfg_dir/lg_bms_tmpl.json             -m set  -u /$Sys/cfg/ctmpl/$Sys/lg_bms_tmpl
    sleep 0.5
    fims_send                                          -m get  -u /$Sys/amap
}

load_bms_modbus()
{
    fims_send -f $cfg_dir/lg_bms_manager_modbus.json    -m set  -u /$Sys/cfg/cfile/$Sys/lg_bms_manager_modbus
}

load_bms_modbus_tmpl()
{
    fims_send -f $cfg_dir/lg_bms_modbus_data_tmpl.json  -m set  -u /$Sys/cfg/ctmpl/$Sys/lg_bms_modbus_data_tmpl
    sleep 0.5
    fims_send                                          -m get  -u /$Sys/amap
}

load_bms_controls()
{

   fims_send -f $cfg_dir/lg_bms_controls.json          -m set  -u /$Sys/cfg/cfile/$Sys/lg_bms_controls
}

load_pcs_manager()
{
    fims_send -f $cfg_dir/lg_pcs_manager.json           -m set  -u /$Sys/cfg/cfile/$Sys/lg_pcs_manager
}

load_pcs_modbus()
{
   fims_send -f $cfg_dir/lg_pcs_modbus_data.json       -m set  -u /$Sys/cfg/cfile/$Sys/lg_pcs_modbus_data
}

load_pcs_controls()
{
    fims_send -f $cfg_dir/lg_pcs_controls.json          -m set  -u /$Sys/cfg/cfile/$Sys/lg_pcs_controls
}

load_site()
{

   fims_send -f $cfg_dir/lg_ess_server.json            -m set  -u /$Sys/cfg/ctmpl/$Sys/lg_ess_server
}

load_final()
{
   fims_send -f $cfg_dir/ess_final.json                -m set  -u /$Sys/cfg/cfile/$Sys/ess_final
}

stop_all_pubs()
{
   fims_send                                        -m set  -u /$Sys/sched/ess/enable false
   fims_send                                        -m set  -u /$Sys/sched/bms/enable false
   fims_send                                        -m set  -u /$Sys/sched/pcs/enable false
}
start_ess_pubs()
{
   fims_send                                        -m set  -u /$Sys/sched/ess/enable true
   #fims_send                                        -m set  -u /$Sys/sched/bms/enable false
   #fims_send                                        -m set  -u /$Sys/sched/pcs/enable false
}

start_bms_pubs()
{
   #fims_send                                        -m set  -u /$Sys/sched/ess/enable true
   fims_send                                        -m set  -u /$Sys/sched/bms/enable true
   #fims_send                                        -m set  -u /$Sys/sched/pcs/enable true
}

start_pcs_pubs()
{
   #fims_send                                        -m set  -u /$Sys/sched/ess/enable true
   #fims_send                                        -m set  -u /$Sys/sched/bms/enable true
   fims_send                                        -m set  -u /$Sys/sched/pcs/enable true
}











stopContactorSim()
{
    runuri="/ess/simulator/bms/bms_contactor"
    fimsSet $runuri 0
}

runContactorSim()
{
    sh /home/config/sim/bms/bms_contactor.sh &
}

stopEnableRackSim()
{
    runuri="/ess/simulator/bms/bms_rack_enable"
    fimsSet $runuri 0
}

runEnableRackSim()
{
    sh /home/config/sim/bms/bms_rack_enable.sh &
}

stopPowerCmdSim()
{
    runuri="/ess/simulator/pcs/pcs_power_cmd_sim"
    fimsSet $runuri 0
}

runPowerCmdSim()
{
    sh /home/config/sim/pcs/pcs_power_cmd_sim.sh &
}

stopChargeDischargeSim()
{
    runuri="/ess/simulator/bms/bms_charge_discharge"
    fimsSet $runuri 0
}

runChargeDischargeSim()
{
    sh /home/config/sim/bms/bms_charge_discharge.sh & 
}

stopPcsCrtlSim()
{
    runuri="/ess/simulator/pcs/pcs_control_sim"
    fimsSet $runuri 0
}

runPcsCtrlSim()
{
    sh /home/config/sim/pcs/pcs_control_sim.sh &
}
runHbSim()
{
    sh /home/config/sim/test_hb.sh &
}
stopHbSim()
{
    runuri="/ess/simulator/ess/run_hb"
    fimsSet $runuri 0
}

reset_ess()
{
    pkill ess_controller
    mkdir -p /home/config/log
    /usr/local/bin/ess_controller/ess_controller /usr/local/etc/config/ess_controller/ > /home/config/log/ess_controller.log 2>&1&
}

#rack_soc rack_soh rack_voltage rack_current rack_max_cell_voltage rack_max_cell_current
allRacks()
{
    racks="
    rack_01 rack_02 rack_03 rack_04 rack_05 rack_06 rack_07 rack_08 rack_09 rack_10
    rack_11 rack_12 rack_13 rack_14 rack_15 rack_16 rack_17 rack_18
    "
    var=$1
    for rack in $racks 
    do
        #echo "$rack /components/bms_${rack}_info/$var $2"
        fims_send -m pub -u /components/bms_${rack}_info/$var $2
    done

}

oneRack()
{
    rack=$1
    var=$2
    val=$3
    fims_send -m pub -u /components/bms_${rack}_info/$var $val
}

getRack()
{
    rack=$1
    fims_send -m get -r /$$ -u /ess/full/components/bms_${rack}_info \
        | jq > /home/config/examples/bms_$rack.json
}

setRack()
{
    rack=$1 
    fims_send -f /home/config/examples/bms_$rack.json -m set -u /ess/full/components/bms_${rack}_info \
        | jq  
}

resetUser()
{
    pkill web_server
    cp /home/saved_config/web_server/permissions.json /home/config/web_server
    /usr/local/bin/web_server/web_server /usr/local/bin/web_ui/ /usr/local/etc/config/web_ui /usr > /home/config/log/web_server.log 2>&1 &
}

defRacks()
{
    allRacks rack_soc 56.7
    allRacks rack_soh 100
    allRacks rack_voltage 1400
    allRacks rack_max_cell_voltage 3.5
    allRacks rack_min_cell_voltage 3.3
    allRacks rack_avg_voltage 3.432
    allRacks rack_max_cell_temperature 27.8
    allRacks rack_min_cell_temperature 22.7
    allRacks rack_avg_temperature 25.42
    allRacks rack_current 3000
    allRacks rack_max_charge_current 3500
    allRacks rack_max_discharge_current 3500
     
}

setBmsInfo() {
    fims_send -m set -u /ess/components/bms_info/$1 $2
}

getBmsInfo() {
    fims_send -m get -r /$$ -u /ess/components/bms_info/$1 
}

bmsCommsOK() {
    fims_send -m set -r /$$ -u /ess/status/bms/ComsOK true
}

bmsOn() {
    setBmsInfo new_connection_status 2
}

bmsStarting() {
    setBmsInfo new_connection_status 1
}
bmsFault() {
    setBmsInfo new_connection_status 3
}

defBms() {
    setBmsInfo system_soc 55.6
    setBmsInfo system_soh 100
    setBmsInfo system_total_voltage 1400
    setBmsInfo system_total_current 3000
    setBmsInfo system_max_cell_voltage 3.45
    setBmsInfo system_min_cell_voltage 3.32
    setBmsInfo system_avg_voltage 3.42
    setBmsInfo system_max_cell_temperature 28.55
    setBmsInfo system_min_cell_temperature 23.55
    setBmsInfo system_avg_temperature 24.55
    setBmsInfo system_max_charge_current 3500
    setBmsInfo system_max_discharge_current 3500
    setBmsInfo system_max_charge_power 4000
    setBmsInfo system_max_discharge_power 4000
    setBmsInfo number_of_racks_total 18
    #setBmsInfo number_of_racks_in_service 18

    
}

setPcsInfo() {
    fims_send -m set -u /ess/components/pcs_running_info/$1 $2
}

getPcsInfo() {
    fims_send -m get -r /$$ -u /ess/components/pcs_running_info/$1 | jq
}

setPcsCont() {
    fims_send -m set -u /ess/controls/ess/$1 $2
}

getPcsCont() {
    fims_send -m get -r /$$ -u /ess/controls/ess/$1 | jq
}

setBmsStatus() {
    fims_send -m set -u /ess/status/bms/$1 $2
}
getBmsStatus() {
    fims_send -m get -r /$$ -u /ess/status/bms/$1
}

setPcsStatus() {
    fims_send -m set -u /ess/status/pcs/$1 $2
}
getPcsStatus() {
    fims_send -m get -r /$$ -u /ess/status/pcs/$1
}

defPcs() {
    
    fims_send -m set -r /$$ -u /ess/components/ems_running_info/sys_status 32 | jq

    setPcsInfo nominal_output_power 45000.6
    setPcsInfo nominal_reactive_output_power 55000.6
    setPcsInfo max_charging_power 45000.6
    setPcsInfo max_discharging_power 35000.7
    setPcsInfo work_state 8
    setPcsInfo operating_mode 516
    setPcsCont ActivePowerSetpoint 0
    setPcsCont ReactivePowerSetpoint 0
    setPcsCont PowerPriority '{"value":"p"}'
    setBmsStatus MaxBMSChargeCurrent '{"value":-3000}'
    setBmsStatus MaxBMSDischargeCurrent '{"value":3000}'
    setBmsStatus MaxBMSChargePower '{"value":-4000}'
    setBmsStatus MaxBMSDischargePower '{"value":4000}'
    setBmsStatus BMSVoltage '{"value":1334}'
    setBmsStatus BMSCurrentCheckStop '{"value":30}'
    setPcsStatus MaxPCSActivePower '{"value":100}'
    setPcsStatus MaxPCSReactivePower '{"value":100}'
    setPcsStatus MaxPCSApparentPower '{"value":100}'
    setPcsStatus MaxPCSChargePower '{"value":-100}'
    setPcsStatus MaxPCSDischargePower '{"value":100}'
    setPcsStatus DCVoltage '{"value":1269}'
    # setPcsInfo system_total_voltage 1400
    # setPcsInfo system_total_current 5123
    # setPcsInfo system_max_cell_voltage 3.55
    # setPcsInfo system_min_cell_voltage 3.32
    # setPcsInfo system_avg_voltage 3.42
    # setPcsInfo system_max_cell_temperature 28.55
    # setPcsInfo system_min_cell_temperature 23.55
    # setPcsInfo system_avg_temperature 24.55
    # setPcsInfo system_max_charge_current 6000
    # setPcsInfo system_max_discharge_current 4000
    # setPcsInfo system_max_charge_power 320034
    # setPcsInfo system_max_discharge_power 220034
    # setPcsInfo number_of_racks_total 18
    # setPcsInfo number_of_racks_in_service 18
}