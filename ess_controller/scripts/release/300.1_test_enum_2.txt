# defs for 300.1_test_enum.sh
# p. wilshire
# 10/22/2021 10/27/2021 
# 10/29/2021  aded ruri 
#
# the test script dots in this to run the config set up by 300.1
# it can be tricky to match exact responses so use grep -v to filter out stuff that changes regardless.
# also the responses will be in alpha order.
#
# basic script to test the following actions.
#"bitset"
#"enum"
#"remap"
#"func"
#"limits"

FimsDir=/usr/local/bin/
FimsName=/ess

descs=()
acts=()
resps=()

#$1 shift 
#$2 shiftnum
#$3 add num
#xxx=addMask 4  1   1


#xxx=`addMask 4  1   1`
#echo " resut 4 1 1 addmask = $xxx"

#######################################################################
function test_talarms()
{
descs[idx]=" >> look at talarms  "
acts[idx]=$(cat<<EOF
${FimsDir}fims_send -m get -r /$$  -u $FimsName/full/talarms | jq
EOF
)

resps[idx]=$(cat<<EOF
{
  "/talarms/bms": {
    "sys_warn": {
      "value": "(HVAC) High output temp 2"
    }
  },
  "/talarms/module_2": {
    "sys_warn": {
      "value": "(HVAC) High input voltage 1"
    }
  }
}
EOF
)
sleeps[idx]="0.1" 
idx=$(($idx+1))
}
############################################################################
#######################################################################
descs[0]="enum actions "
#######################################################################
#return 0
idx=1
descs[idx]=" >> setup test_enum actions  "
acts[idx]=$(cat<<EOF
${FimsDir}fims_send -m set  -u $FimsName/full/controls/bms '
{
    "test_enum":{ 
        "value":0,
        "debug":false,
        "actions": {
            "onSet": [{
                "enum": 
                    [
                        {"mask":15,"inValue": 0,"uri": "/controls/bms:enum_test","outValue": "zero" },
                        {"mask":15,"inValue": 1,"uri": "/controls/bms:enum_test","outValue": "one", "debug":false },
                        {"mask":15,"inValue": 2,"uri": "/controls/bms:enum_test","outValue": "two" },
                        {"mask":15,"inValue": 3,"uri": "/controls/bms:enum_test","outValue": "three" },
                        {"mask":15,"inValue": 4,"uri": "/controls/bms:enum_test","outValue": "four" },
                        {"mask":15,"inValue": 5,"uri": "/controls/bms:enum_test","outValue": "five" },
                        {"mask":15,"inValue": 6,"uri": "/controls/bms:enum_test","outValue": "six" },
                        {"mask":15,"inValue": 7,"uri": "/controls/bms:enum_test","outValue": "seven" },
                        {"shift":4, "mask":15,"inValue": 0,"uri": "/controls/bms:enum_test1","outValue": "zero_1" },
                        {"shift":4, "mask":15,"inValue": 1,"uri": "/controls/bms:enum_test1","outValue": "one_1" },
                        {"shift":4, "mask":15,"inValue": 2,"uri": "/controls/bms:enum_test1","outValue": "two_1" },
                        {"shift":4, "mask":15,"inValue": 3,"uri": "/controls/bms:enum_test1","outValue": "three_1" },
                        {"shift":4, "mask":15,"inValue": 4,"uri": "/controls/bms:enum_test1","outValue": "four_1" },
                        {"shift":4, "mask":15,"inValue": 5,"uri": "/controls/bms:enum_test1","outValue": "five_1" },
                        {"shift":4, "mask":15,"inValue": 6,"uri": "/controls/bms:enum_test1","outValue": "six_1" },
                        { "inValue+":1,"useRange":true,
                             "mask":15,"inValue": 6,"uri": "/controls/bms:enum_test2","outValue": "inrange" },
                        { "inValue+":5,"inValue-":2, "useRange":true, "debug": false, 
                             "mask":15,"inValue": 0,"uri": "/controls/bms:enum_test21","outValue": "outrange" }
                    ]                
            }]
        }
    }
}'
EOF
)
resps[idx]=$(cat<<EOF
EOF
)
sleeps[idx]="0.1" 
idx=$(($idx+1))

descs[idx]=" >> setup test_enum2 actions  "
acts[idx]=$(cat<<EOF
${FimsDir}fims_send -m set  -u $FimsName/full/controls/bms '
{
    "test_enum2":{ 
        "value":0,
        "debug":false,
        "defVal":"defaultVal",
        "defUri":"/controls/bms:enum_test3",
        "actions": {
            "onSet": [{
                "enum": 
                    [
                        {"mask":15,"inValue": 0,"uri": "/controls/bms:enum_test3","outValue": "zero" },
                        {"enable":"/controls/bms:enum_enable",
                         "mask":15,"inValue": 1,"uri": "/controls/bms:enum_test3","outValue": "one"   },
                        {"mask":15,"inValue": 2,"uri": "/controls/bms:enum_test3","outValue": "two"   },
                        {"ifChanged":true,
                          "mask":15,"inValue": 3,"uri": "/controls/bms:enum_test3","outValue": "three" },
                        {"ifChanged":false,
                          "mask":15,"inValue": 4,"uri": "/controls/bms:enum_test3","outValue": "four"  },
                        {  "ruri":"/controls/bms:ruri_test",
                            "mask":15,"inValue": 5,"uri": "/controls/bms:enum_test3","outValue": "five"  },
                        {"mask":15,"inValue": 6,"uri": "/controls/bms:enum_test3","outValue": "six"   },
                        {"mask":15,"inValue": 7,"uri": "/controls/bms:enum_test3","outValue": "seven" },
                        {"mask":15,"inVar":"/controls/bms:test_invar", "inValue":9
                                                              ,"uri": "/controls/bms:enum_invar9" }
                    ]                
            }]
        }
    }
}'
EOF
)
resps[idx]=$(cat<<EOF
EOF
)
sleeps[idx]="0.1" 
idx=$(($idx+1))

descs[idx]=" >> setup test_ruri uri actions  "
acts[idx]=$(cat<<EOF
${FimsDir}fims_send -m set  -u $FimsName/full/controls/bms '
{
 "test_ruri":{"value":0,
     "amap":"ess",
     "actions":{"onSet":[{
                    "enum": [
                        {"mask":15,"shift":12, "inValue": 1, "uri": "/controls/bms:aname", 
                                                  "outValue": "/talarms/bms", "debug":false},
                        {"mask":15,"shift":12, "inValue": 2, "uri": "/controls/bms:aname",
                                                   "outValue": "/talarms/module_1", "debug":false },
                        {"mask":15,"shift":12, "inValue": 3, "uri": "/controls/bms:aname",
                                                  "outValue": "/talarms/module_2"},
                        {"shift": 12, "mask": 15, "inValue": 4, "uri": "/controls/bms:aname",  "outValue": "/talarms/module_3"},
                        {"shift": 12, "mask": 15, "inValue": 5, "uri": "/controls/bms:aname",  "outValue": "/talarms/module_4"},
                        {"shift": 12, "mask": 15, "inValue": 6, "uri": "/controls/bms:aname",  "outValue": "/talarms/module_5"},
                        {"shift": 12, "mask": 15, "inValue": 7, "uri": "/controls/bms:aname",  "outValue": "/talarms/module_6"},
                        {"shift": 12, "mask": 15, "inValue": 8, "uri": "/controls/bms:aname",  "outValue": "/talarms/module_7"}

            ]}]}}
}'
EOF
)
resps[idx]=$(cat<<EOF
EOF
)
sleeps[idx]="0.1" 
idx=$(($idx+1))

descs[idx]=" >> setup test_ruri val actions  "
acts[idx]=$(cat<<EOF
${FimsDir}fims_send -m set  -u $FimsName/full/controls/bms '
{
 "test_ruri_val":{"value":0,
     "amap":"ess",
     "actions":{"onSet":[{
                    "enum": [
                        {"inValue": 1, "uri":"/controls/bms:aname", "ruri": "sys_warn",  "outValue": "(HVAC) High input voltage 1"},

                        {"inValue": 2, "uri":"/controls/bms:aname", "ruri": "sys_warn",  "outValue": "(HVAC) High output temp 2"},

                        {"inValue": 3, "uri":"/controls/bms:aname", "ruri": "sys_warn",  "outValue": "(HVAC) High value 3 "}

            ]}]}}
}'
EOF
)
resps[idx]=$(cat<<EOF
EOF
)
sleeps[idx]="0.1" 
idx=$(($idx+1))

#return 0
setVar test_enum@debug 1           0.1 " >> set test_enum debug to  1"
setVar test_invar       0       0.1 " >> set test_invar to 0"

setVar enum_test21      '"undef"' 0.1 " >> set enum_test21 as undef "
setVar test_enum       0           0.1 " >> set test_enum to 0"
getVar enum_test       '"zero"'    0.1 " >> get enum_test as zero "
getVar enum_test1      '"zero_1"'  0.1 " >> get enum_test1 as zero_1 "
getVar enum_test21      '"outrange"' 0.1 " >> get enum_test21 as outrange  TODO check this"

#return 0

setVar test_enum       1           0.1 " >> set test_enum to 1"
getVar enum_test       '"one"'     0.1 " >> get enum_test as one"
getVar enum_test1      '"zero_1"'  0.1 " >> get enum_test1 as zero_1 "
#return 0
setVar test_enum       2           0.1 " >> set test_enum to 2"
getVar enum_test       '"two"'     0.1 " >> get enum_test as two"
getVar enum_test1      '"zero_1"'  0.1 " >> get enum_test1 as zero_1 "

#return 0
xxx=`addMask 4  1   1`
setVar test_enum       $xxx        0.1 " >> set test_enum to 0"
getVar enum_test       '"one"'     0.1 " >> get enum_test as one "
getVar enum_test1      '"one_1"'   0.1 " >> get enum_test1 as one_1 "

xxx=`addMask 4  1   0`
setVar test_enum       $xxx        0.1 " >> set test_enum to 0"
getVar enum_test       '"zero"'    0.1 " >> get enum_test as zero "
getVar enum_test1      '"one_1"'   0.1 " >> get enum_test1 as one_1 "

setVar test_enum       7           0.1 " >> set test_enum to 7"
getVar enum_test2      '"inrange"' 0.1 " >> get enum_test2 as inrange "
getVar enum_test       '"seven"'   0.1 " >> get enum_test as seven "



setVar test_enum       -1        0.1 " >> set test_enum to -1"
getVar enum_test2      '"inrange"' 0.1 " >> get enum_test2 as inrange "
getVar enum_test21     '"outrange"' 0.1 " >> get enum_test21 as outrange "
getVar enum_test       '"seven"'   0.1 " >> get enum_test as seven "


setVar enum_test3       '"test"'   0.1 " >> set enum_test3 as test "
setVar test_enum2       0        0.1 " >> set test_enum2 to 0"
getVar enum_test3       '"zero"'   0.1 " >> get enum_test3 as zero "
setVar test_enum2       1        0.1 " >> set test_enum2 to 1"
getVar enum_test3       '"one"'   0.1 " >> get enum_test3 as one "
setVar test_enum2       10        0.1 " >> set test_enum2 to 10"
getVar enum_test3       '"defaultVal"'   0.1 " >> get enum_test3 as defaultVal "

# with test_invar set to 9 pass inval to enum_invar
setVar enum_invar9      1234    0.1 " >> set enum_invar9 as 1234 "
setVar test_invar       9       0.1 " >> set test_invar to 9"
setVar enum_invar       3        0.1 " >> set enum_invar to 3 "
setVar test_enum2       9        0.1 " >> set test_enum2 to 9"
getVar enum_invar9       9        0.1 " >> get enum_invar9 as 9 "

setVar enum_enable      true       0.1 " >> set enum_enable to true"

setVar test_enum2       2   0.1 " >> set test_enum2 to 2 "
getVar enum_test3       '"two"'   0.1 " >> get enum_test3 as two "
setVar test_enum2       1   0.1 " >> set test_enum2 to 1 "
getVar enum_test3       '"one"'   0.1 " >> get enum_test3 as one "

setVar test_enum2       2   0.1 " >> set test_enum2 to 2 "
getVar enum_test3       '"two"'   0.1 " >> get enum_test3 as two "

setVar enum_enable      false       0.1 " >> set enum_enable to true"
setVar test_enum2       1   0.1 " >> set test_enum2 to 1 "
getVar enum_test3       '"defaultVal"'   0.1 " >> get enum_test3 as defaultVal"

setVar enum_enable      true       0.1 " >> set enum_enable to true"
setVar test_enum2       0   0.1 " >> set test_enum2 to 0 "
setVar test_enum2       2   0.1 " >> set test_enum2 to 2 "
getVar enum_test3       '"two"'   0.1 " >> get enum_test3 as two"


# test ifChanged  should single shot the value

# set the value 
setVar test_enum2       3   0.1 " >> set test_enum2 to 3 "
getVar enum_test3       '"three"'   0.1 " >> get enum_test3 as three #1"

setVar enum_test3       '"dummy"'   0.1 " >> set enum_test3 as dummy "
# set value again after no change 
getVar enum_test3       '"dummy"'   0.1 " >> check enum_test3 dummy after set "
setVar test_enum2       3   0.1 " >> set test_enum2 to 3 "
#it will be set to defautVal because of nochange
# this should be dummy
getVar enum_test3       '"defaultVal"'   0.1 " >> get enum_test3 as defaultVal "
setVar test_enum2       2   0.1 " >> set test_enum2 to 2 "
setVar test_enum2       3   0.1 " >> set test_enum2 to 3 "
getVar enum_test3       '"three"'   0.1 " >> get enum_test3 as three #2"


setVar test_enum2       4   0.1 " >> set test_enum2 to 4 "
getVar enum_test3       '"four"'   0.1 " >> get enum_test3 as four "

setVar enum_test3       '"dummy"'   0.1 " >> set enum_test3 as dummy "
getVar enum_test3       '"dummy"'   0.1 " >> get enum_test3 as dummy "
# set value again after no change 
setVar test_enum2       4   0.1 " >> set test_enum2 to 4 "

# this should be dummy
getVar enum_test3       '"four"'   0.1 " >> get enum_test3 as four "

#ignoreValue

setVar test_ruri       4096  0.1 " >> set test_ruri to 4096 "
getVar aname            '"/talarms/bms"'   0.1 " >> get aname "
setVar test_ruri_val    2    0.1 " >> set test_ruri_val to 2 "


setVar test_ruri       12288   0.1 " >> set test_ruri to 12288 "
getVar aname       '"/talarms/module_2"'   0.1 " >> get aname "

setVar test_ruri_val       1   0.1 " >> set test_ruri_val to 1 "

test_talarms




return 0


#/usr/local/bin/fims/fims_send -m set -r /$$ -u $SYS/test/pcs '
#      {"test_enum":{"value":2}}'
#/usr/local/bin/fims/fims_send -m set -r /$$ -u $SYS/test/pcs '
#      {"test_enum":{"value":4096}}'
#/usr/local/bin/fims/fims_send -m set -r /$$ -u $SYS/test/pcs '
#      {"test_enum":{"value":2}}'
#/usr/local/bin/fims/fims_send -m get -r /$$ -u $SYS/full/test/pcs | jq
#echo just get aname
#/usr/local/bin/fims/fims_send -m get -r /$$ -u $SYS/full/test/pcs/aname | jq
#echo get talarms
#/usr/local/bin/fims/fims_send -m get -r /$$ -u $SYS/full/talarms| jq

# expected output
# {
#   "/talarms/module_1": {
#     "sys_warn": {
#       "value": "(HVAC) High input voltage"
#     }
#   },
#   "/talarms/pcs": {
#     "sys_warn": {
#       "value": "(HVAC) High output temp"
#     }
#   }
# }