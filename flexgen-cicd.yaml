AWSTemplateFormatVersion: "2010-09-09"
Description: HybridOS CI/CD Pipeline v1.0
Parameters:
  BuildImage:
    Type: String
    Default: "flexgen/centos7:devel"

  GitHubRepo:
    Type: String
    Default: hybridos

  GitHubBranch:
    Type: String
    Default: develop

  CodeStarConnectionArn:
    Type: String
    Default: arn:aws:codestar-connections:us-east-1:625828042324:connection/8f739105-c8ea-484c-9240-0081672c5a70

  DockerHubSecretArn:
    Type: String
    Default: arn:aws:secretsmanager:us-east-1:625828042324:secret:dockerhub-q1Fhdb

  GitHubUserSsmParamName:
    Type: String
    Default: github_user

  GitHubTokenSsmParamName:
    Type: String
    Default: github_token

  SshPrivateKeySsmParamName:
    Type: String
    Default: id_rsa

  SshPublicKeySsmParamName:
    Type: String
    Default: id_rsa.pub

Resources:
  AssetsBucket:
    Type: AWS::S3::Bucket

  CodeBuildServiceRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - codebuild.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: code-build-policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Resource: "*"
                Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
              - Resource:
                  - !Sub arn:${AWS::Partition}:s3:::${AssetsBucket}/*
                Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:PutObjectAcl
                  - s3:GetObject
                  - s3:GetObjectVersion
                  - s3:GetBucketVersioning
              - Resource: "*"
                Effect: Allow
                Action:
                  - s3:ListAllMyBuckets
                  - s3:ListObjects
              - Resource: !Ref CodeStarConnectionArn
                Effect: Allow
                Action:
                  - codestar-connections:UseConnection
              - Resource: "*" # should scope this down if possible
                Effect: Allow
                Action:
                  - ecs:* # should scope this down to only necessary actions for `docker compose up`
              - Resource: !Ref DockerHubSecretArn
                Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue
              - Resource:
                  - !Sub
                    - arn:${Partition}:ssm:${Region}:${AccountId}:parameter/${ParamName}
                    - Partition: !Ref AWS::Partition
                      Region: !Ref AWS::Region
                      AccountId: !Ref AWS::AccountId
                      ParamName: !Ref GitHubUserSsmParamName
                  - !Sub
                    - arn:${Partition}:ssm:${Region}:${AccountId}:parameter/${ParamName}
                    - Partition: !Ref AWS::Partition
                      Region: !Ref AWS::Region
                      AccountId: !Ref AWS::AccountId
                      ParamName: !Ref GitHubTokenSsmParamName
                  - !Sub
                    - arn:${Partition}:ssm:${Region}:${AccountId}:parameter/${ParamName}
                    - Partition: !Ref AWS::Partition
                      Region: !Ref AWS::Region
                      AccountId: !Ref AWS::AccountId
                      ParamName: !Ref SshPrivateKeySsmParamName
                  - !Sub
                    - arn:${Partition}:ssm:${Region}:${AccountId}:parameter/${ParamName}
                    - Partition: !Ref AWS::Partition
                      Region: !Ref AWS::Region
                      AccountId: !Ref AWS::AccountId
                      ParamName: !Ref SshPublicKeySsmParamName
                Effect: Allow
                Action:
                  - ssm:GetParameters
              - Resource: "*"
                Effect: Allow
                Action:
                  - ecr:GetAuthorizationToken

  CodePipelineServiceRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - codepipeline.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: code-pipeline-policy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Resource:
                  - !Sub arn:${AWS::Partition}:s3:::${AssetsBucket}/*
                Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:PutObjectAcl
                  - s3:GetObject
                  - s3:GetObjectVersion
                  - s3:GetBucketVersioning
                  - s3:ListObjects
              - Resource:
                  - arn:aws:s3:::*
                Effect: Allow
                Action:
                  - s3:ListAllMyBuckets
              - Resource: "*"
                Effect: Allow
                Action:
                  - codebuild:StartBuild
                  - codebuild:BatchGetBuilds
                  - iam:PassRole
              - Resource: "*"
                Effect: Allow
                Action:
                  - lambda:*
              - Resource: !Ref CodeStarConnectionArn
                Effect: Allow
                Action:
                  - codestar-connections:UseConnection

  BuildProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Artifacts:
        Type: "CODEPIPELINE"
      Source:
        Type: "CODEPIPELINE"
      Environment:
        ComputeType: BUILD_GENERAL1_SMALL
        Image: !Ref BuildImage
        ImagePullCredentialsType: SERVICE_ROLE
        RegistryCredential:
          Credential: !Ref DockerHubSecretArn
          CredentialProvider: SECRETS_MANAGER
        Type: LINUX_CONTAINER
        EnvironmentVariables:
          - Name: AWS_DEFAULT_REGION
            Value: !Ref AWS::Region
          - Name: GITHUB_USER
            Type: PARAMETER_STORE
            Value: !Ref GitHubUserSsmParamName
          - Name: GITHUB_TOKEN
            Type: PARAMETER_STORE
            Value: !Ref GitHubTokenSsmParamName
          - Name: SSH_KEY
            Type: PARAMETER_STORE
            Value: !Ref SshPrivateKeySsmParamName
          - Name: SSH_PUB
            Type: PARAMETER_STORE
            Value: !Ref SshPublicKeySsmParamName
      Name: !Sub ${AWS::StackName}-build
      ServiceRole: !Ref CodeBuildServiceRole

  TestProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Artifacts:
        Type: "CODEPIPELINE"
      Source:
        Type: "CODEPIPELINE"
        BuildSpec: |
          version: 0.1
          phases:
            install:
              commands:
                - ./cicd-scripts/test/install.sh
            pre_build:
              commands:
                - ./cicd-scripts/test/pre_build.sh
            build:
              commands:
                - ./cicd-scripts/test/build.sh
            post_build:
              commands:
                - ./cicd-scripts/test/post_build.sh
      Environment:
        ComputeType: BUILD_GENERAL1_SMALL
        Image: !Ref BuildImage
        ImagePullCredentialsType: SERVICE_ROLE
        RegistryCredential:
          Credential: !Ref DockerHubSecretArn
          CredentialProvider: SECRETS_MANAGER
        Type: LINUX_CONTAINER
        PrivilegedMode: true
      Name: !Sub ${AWS::StackName}-test
      ServiceRole: !Ref CodeBuildServiceRole
  
  PackageProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Artifacts:
        Type: "CODEPIPELINE"
      Source:
        Type: "CODEPIPELINE"
        BuildSpec: |
          version: 0.1
          phases:
            build:
              commands:
                - ./cicd-scripts/package/build.sh
          artifacts:
            files:
              - ./output/**/*
      Environment:
        ComputeType: BUILD_GENERAL1_SMALL
        Image: !Ref BuildImage
        ImagePullCredentialsType: SERVICE_ROLE
        RegistryCredential:
          Credential: !Ref DockerHubSecretArn
          CredentialProvider: SECRETS_MANAGER
        Type: LINUX_CONTAINER
      Name: !Sub ${AWS::StackName}-package
      ServiceRole: !Ref CodeBuildServiceRole

  DockerProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Artifacts:
        Type: "CODEPIPELINE"
      Source:
        Type: "CODEPIPELINE"
        BuildSpec: |
          version: 0.1
          env:
            variables:
              imageName: centos7
              imageTag: devel
              repoName: hybridos
              dockerTag: v10.3.0
          phases:
            install:
              commands:
                - ./cicd-scripts/docker/install.sh
            pre_build:
              commands:
                - ./cicd-scripts/docker/pre_build.sh
            build:
              commands:
                - ./cicd-scripts/docker/build.sh
      Environment:
        ComputeType: BUILD_GENERAL1_SMALL
        Image: !Ref BuildImage
        ImagePullCredentialsType: SERVICE_ROLE
        RegistryCredential:
          Credential: !Ref DockerHubSecretArn
          CredentialProvider: SECRETS_MANAGER
        Type: LINUX_CONTAINER
        EnvironmentVariables:
          - Name: AWS_DEFAULT_REGION
            Value: !Ref AWS::Region
          - Name: AWS_ACCOUNT_ID
            Value: !Ref AWS::AccountId
      Name: !Sub ${AWS::StackName}-docker
      ServiceRole: !Ref CodeBuildServiceRole

  Pipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      RoleArn: !GetAtt CodePipelineServiceRole.Arn
      ArtifactStore:
        Type: S3
        Location: !Ref AssetsBucket
      Stages:
        - Name: Source
          Actions:
            - Name: Source
              ActionTypeId:
                Category: Source
                Owner: AWS
                Version: "1"
                Provider: CodeStarSourceConnection
              Configuration:
                ConnectionArn: !Ref CodeStarConnectionArn
                FullRepositoryId: !Ref GitHubRepo
                BranchName: !Ref GitHubBranch
                OutputArtifactFormat: CODEBUILD_CLONE_REF
              OutputArtifacts:
                - Name: HybridOs
              RunOrder: 1
        - Name: Build
          Actions:
            - Name: Build
              ActionTypeId:
                Category: Build
                Owner: AWS
                Version: "1"
                Provider: CodeBuild
              Configuration:
                ProjectName: !Ref BuildProject
              InputArtifacts:
                - Name: HybridOs
              OutputArtifacts:
                - Name: HybridOsBuild
              RunOrder: 1
        - Name: Test
          Actions:
            - Name: Test
              ActionTypeId:
                Category: Build
                Owner: AWS
                Version: "1"
                Provider: CodeBuild
              Configuration:
                ProjectName: !Ref TestProject
              InputArtifacts:
                - Name: HybridOsBuild
              OutputArtifacts:
                - Name: HybridOsTestResult
              RunOrder: 1
        - Name: Deploy
          Actions:
            - Name: Package
              ActionTypeId:
                Category: Build
                Owner: AWS
                Version: "1"
                Provider: CodeBuild
              Configuration:
                ProjectName: !Ref PackageProject
              InputArtifacts:
                - Name: HybridOsBuild
              OutputArtifacts:
                - Name: HybridOsPackageResult
              RunOrder: 1
            - Name: Docker
              ActionTypeId:
                Category: Build
                Owner: AWS
                Version: "1"
                Provider: CodeBuild
              Configuration:
                ProjectName: !Ref DockerProject
              InputArtifacts:
                - Name: HybridOsBuild
              OutputArtifacts:
                - Name: HybridOsDockerResult
              RunOrder: 1
