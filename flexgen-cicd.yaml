AWSTemplateFormatVersion: "2010-09-09"
Description: HybridOS CI/CD Pipeline v1.0
Parameters:
  GitHubRepo:
    Type: String
    Default: hybridos

  GitHubBranch:
    Type: String
    Default: codepipeline

  CodeStarConnectionArn:
    Type: String
    Default: arn:aws:codestar-connections:us-east-1:625828042324:connection/8f739105-c8ea-484c-9240-0081672c5a70

  DockerHubSecretArn:
    Type: String
    Default: arn:aws:secretsmanager:us-east-1:625828042324:secret:dockerhub-q1Fhdb

  GitHubUserSsmParamName:
    Type: String
    Default: github_user

  GitHubTokenSsmParamName:
    Type: String
    Default: github_token

  SshPrivateKeySsmParamName:
    Type: String
    Default: id_rsa

  SshPublicKeySsmParamName:
    Type: String
    Default: id_rsa.pub

Resources:
  AssetsBucket:
    Type: AWS::S3::Bucket

  CodeBuildServiceRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - codebuild.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: code-build-policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Resource: "*"
                Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
              - Resource:
                  - !Sub arn:${AWS::Partition}:s3:::${AssetsBucket}/*
                Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:PutObjectAcl
                  - s3:GetObject
                  - s3:GetObjectVersion
                  - s3:GetBucketVersioning
              - Resource: "*"
                Effect: Allow
                Action:
                  - s3:ListAllMyBuckets
                  - s3:ListObjects
              - Resource: !Ref CodeStarConnectionArn
                Effect: Allow
                Action:
                  - codestar-connections:UseConnection
              - Resource: "*" # should scope this down if possible
                Effect: Allow
                Action:
                  - ecs:* # should scope this down to only necessary actions for `docker compose up`
              - Resource: !Ref DockerHubSecretArn
                Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue
              - Resource:
                  - !Sub
                    - arn:${Partition}:ssm:${Region}:${AccountId}:parameter/${ParamName}
                    - Partition: !Ref AWS::Partition
                      Region: !Ref AWS::Region
                      AccountId: !Ref AWS::AccountId
                      ParamName: !Ref GitHubUserSsmParamName
                  - !Sub
                    - arn:${Partition}:ssm:${Region}:${AccountId}:parameter/${ParamName}
                    - Partition: !Ref AWS::Partition
                      Region: !Ref AWS::Region
                      AccountId: !Ref AWS::AccountId
                      ParamName: !Ref GitHubTokenSsmParamName
                  - !Sub
                    - arn:${Partition}:ssm:${Region}:${AccountId}:parameter/${ParamName}
                    - Partition: !Ref AWS::Partition
                      Region: !Ref AWS::Region
                      AccountId: !Ref AWS::AccountId
                      ParamName: !Ref SshPrivateKeySsmParamName
                  - !Sub
                    - arn:${Partition}:ssm:${Region}:${AccountId}:parameter/${ParamName}
                    - Partition: !Ref AWS::Partition
                      Region: !Ref AWS::Region
                      AccountId: !Ref AWS::AccountId
                      ParamName: !Ref SshPublicKeySsmParamName
                Effect: Allow
                Action:
                  - ssm:GetParameters
              - Resource: "*"
                Effect: Allow
                Action:
                  - ecr:GetAuthorizationToken

  CodePipelineServiceRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - codepipeline.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: code-pipeline-policy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Resource:
                  - !Sub arn:${AWS::Partition}:s3:::${AssetsBucket}/*
                Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:PutObjectAcl
                  - s3:GetObject
                  - s3:GetObjectVersion
                  - s3:GetBucketVersioning
                  - s3:ListObjects
              - Resource:
                  - arn:aws:s3:::*
                Effect: Allow
                Action:
                  - s3:ListAllMyBuckets
              - Resource: "*"
                Effect: Allow
                Action:
                  - codebuild:StartBuild
                  - codebuild:BatchGetBuilds
                  - iam:PassRole
              - Resource: "*"
                Effect: Allow
                Action:
                  - lambda:*
              - Resource: !Ref CodeStarConnectionArn
                Effect: Allow
                Action:
                  - codestar-connections:UseConnection

  BuildProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Artifacts:
        Type: "CODEPIPELINE"
      Source:
        Type: "CODEPIPELINE"
        BuildSpec: |
          version: 0.2
          phases:
            install:
              commands:
                - echo Set Agent...
                - mkdir -p ~/.ssh
                - echo "$SSH_KEY" > ~/.ssh/id_rsa   
                - echo "$SSH_PUB" > ~/.ssh/id_rsa.pub
                - chmod 600 ~/.ssh/id_rsa
                - ssh-keygen -F github.com || ssh-keyscan github.com >>~/.ssh/known_hosts
                - git config --global url."git@github.com:".insteadOf "https://github.com/"
                - eval "$(ssh-agent -s)"
                - echo Get submodules...
                - git init
                - git submodule update --recursive
                - git clone --recurse-submodules https://$GITHUB_USER:$GITHUB_TOKEN@github.com/flexgen-power/site_controller.git
                - git clone --recurse-submodules https://$GITHUB_USER:$GITHUB_TOKEN@github.com/flexgen-power/fleet_manager.git
                - git clone --recurse-submodules https://$GITHUB_USER:$GITHUB_TOKEN@github.com/flexgen-power/washer.git
                - git clone --recurse-submodules https://$GITHUB_USER:$GITHUB_TOKEN@github.com/flexgen-power/scheduler.git
                - git clone --recurse-submodules https://$GITHUB_USER:$GITHUB_TOKEN@github.com/flexgen-power/cops.git
                - git clone --recurse-submodules https://$GITHUB_USER:$GITHUB_TOKEN@github.com/flexgen-power/ftd.git
                - git clone --recurse-submodules https://$GITHUB_USER:$GITHUB_TOKEN@github.com/flexgen-power/cloud_sync.git
                - git clone --recurse-submodules https://$GITHUB_USER:$GITHUB_TOKEN@github.com/flexgen-power/dts.git
                - git clone --recurse-submodules https://$GITHUB_USER:$GITHUB_TOKEN@github.com/flexgen-power/twins.git
                - git clone --recurse-submodules https://$GITHUB_USER:$GITHUB_TOKEN@github.com/flexgen-power/echo.git
                - git clone --recurse-submodules https://$GITHUB_USER:$GITHUB_TOKEN@github.com/flexgen-power/overwatch.git
                - git clone --recurse-submodules https://$GITHUB_USER:$GITHUB_TOKEN@github.com/flexgen-power/metrics.git
                - git clone --recurse-submodules https://$GITHUB_USER:$GITHUB_TOKEN@github.com/flexgen-power/web_server.git
                - git clone --recurse-submodules https://$GITHUB_USER:$GITHUB_TOKEN@github.com/flexgen-power/web_ui.git
                - echo Finished clone submodules...
                - echo Starting build...
            pre_build:
              commands:
                - echo Delete all submodules package-utility folders in pre-build...
                - rm -r ./site_controller/package_utility
                - rm -r ./fleet_manager/package_utility
                - rm -r ./dnp3_interface/package_utility
                - rm -r ./washer/package_utility
                - rm -r ./scheduler/package_utility
                - rm -r ./cops/package_utility
                - rm -r ./ftd/package_utility
                - rm -r ./cloud_sync/package_utility
                - rm -r ./dts/package_utility
                - rm -r ./twins/package_utility
                - rm -r ./echo/package_utility
                - rm -r ./overwatch/package_utility
                - rm -r ./metrics/package_utility
                - rm -r ./web_server/package_utility
                - rm -r ./web_ui/package_utility
                - echo All package_utility deleted, ready for build...
            build:
              commands:
                - echo Build started on `date`
                - echo running build.sh ...
                - ./build.sh
            post_build:
              commands:
                - echo Build completed on `date`
          artifacts:
            files:
              - ./**/*
      Environment:
        ComputeType: BUILD_GENERAL1_SMALL
        Image: "flexgen/centos7:devel-10.3.0"
        ImagePullCredentialsType: SERVICE_ROLE
        RegistryCredential:
          Credential: !Ref DockerHubSecretArn
          CredentialProvider: SECRETS_MANAGER
        Type: LINUX_CONTAINER
        EnvironmentVariables:
          - Name: AWS_DEFAULT_REGION
            Value: !Ref AWS::Region
          - Name: GITHUB_USER
            Type: PARAMETER_STORE
            Value: !Ref GitHubUserSsmParamName
          - Name: GITHUB_TOKEN
            Type: PARAMETER_STORE
            Value: !Ref GitHubTokenSsmParamName
          - Name: SSH_KEY
            Type: PARAMETER_STORE
            Value: !Ref SshPrivateKeySsmParamName
          - Name: SSH_PUB
            Type: PARAMETER_STORE
            Value: !Ref SshPublicKeySsmParamName
      Name: !Sub ${AWS::StackName}-build
      ServiceRole: !Ref CodeBuildServiceRole

  TestProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Artifacts:
        Type: "CODEPIPELINE"
      Source:
        Type: "CODEPIPELINE"
        BuildSpec: |
          version: 0.1
          phases:
            install:
              commands:
                - echo Installing AWS CLI...
                - curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
                - unzip awscliv2.zip
                - sudo ./aws/install

                - echo Installing Docker...
                - sudo yum install -y yum-utils
                - sudo yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo
                - sudo yum install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin
            pre_build:
              commands:
                - echo Getting container credentials...
                - STS_RESPONSE=$(curl 169.254.170.2$AWS_CONTAINER_CREDENTIALS_RELATIVE_URI)
                - export AWS_ACCESS_KEY_ID=$(echo $STS_RESPONSE | jq .AccessKeyId | tr -d \")
                - export AWS_SECRET_ACCESS_KEY=$(echo $STS_RESPONSE | jq .SecretAccessKey | tr -d \")
                - export AWS_SESSION_TOKEN=$(echo $STS_RESPONSE | jq .Token | tr -d \")
                - aws sts get-caller-identity
                
                # - echo Creating and activating Docker ECS context...
                # - docker context create ecs hybridos-test --from-env
                # - docker context use hybridos-test
                
                # - echo Standing up hybridos in ECS via Docker Compose...
                # - docker compose up
            build:
              commands:
                # - echo Running test scripts...
                - echo No-op
            post_build:
              commands:
                # - echo Spinning down hybridos ECS environment...
                # - docker compose down
                - echo No-op
      Environment:
        ComputeType: BUILD_GENERAL1_SMALL
        Image: "flexgen/centos7:devel-10.3.0"
        ImagePullCredentialsType: SERVICE_ROLE
        RegistryCredential:
          Credential: !Ref DockerHubSecretArn
          CredentialProvider: SECRETS_MANAGER
        Type: LINUX_CONTAINER
        PrivilegedMode: true
      Name: !Sub ${AWS::StackName}-test
      ServiceRole: !Ref CodeBuildServiceRole
  
  PackageProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Artifacts:
        Type: "CODEPIPELINE"
      Source:
        Type: "CODEPIPELINE"
        BuildSpec: |
          version: 0.1
          phases:
            build:
              commands:
                - echo Running Package script...
                - ./package.sh
          artifacts:
            files:
              - ./output/**/*
      Environment:
        ComputeType: BUILD_GENERAL1_SMALL
        Image: "flexgen/centos7:devel-10.3.0"
        ImagePullCredentialsType: SERVICE_ROLE
        RegistryCredential:
          Credential: !Ref DockerHubSecretArn
          CredentialProvider: SECRETS_MANAGER
        Type: LINUX_CONTAINER
      Name: !Sub ${AWS::StackName}-package
      ServiceRole: !Ref CodeBuildServiceRole

  DockerProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Artifacts:
        Type: "CODEPIPELINE"
      Source:
        Type: "CODEPIPELINE"
        BuildSpec: |
          version: 0.1
          env:
            variables:
              imageName: centos7
              imageTag: devel
              repoName: hybridos
              dockerTag: v10.3.0
          phases:
            install:
              commands:
                - echo Installing AWS CLI...
                - curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
                - unzip awscliv2.zip
                - sudo ./aws/install

                - echo Installing Docker...
                - sudo yum install -y yum-utils
                - sudo yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo
                - sudo yum install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin
            pre_build:
              commands:
                - echo Logging in to Amazon ECR...
                - aws ecr get-login-password --region $AWS_DEFAULT_REGION | docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com
            build:
              commands:
                # - echo Running Docker script...
                # - ./docker.sh
                - echo No-op
      Environment:
        ComputeType: BUILD_GENERAL1_SMALL
        Image: "flexgen/centos7:devel-10.3.0"
        ImagePullCredentialsType: SERVICE_ROLE
        RegistryCredential:
          Credential: !Ref DockerHubSecretArn
          CredentialProvider: SECRETS_MANAGER
        Type: LINUX_CONTAINER
        EnvironmentVariables:
          - Name: AWS_DEFAULT_REGION
            Value: !Ref AWS::Region
          - Name: AWS_ACCOUNT_ID
            Value: !Ref AWS::AccountId
      Name: !Sub ${AWS::StackName}-docker
      ServiceRole: !Ref CodeBuildServiceRole

  Pipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      RoleArn: !GetAtt CodePipelineServiceRole.Arn
      ArtifactStore:
        Type: S3
        Location: !Ref AssetsBucket
      Stages:
        - Name: Source
          Actions:
            - Name: Source
              ActionTypeId:
                Category: Source
                Owner: AWS
                Version: "1"
                Provider: CodeStarSourceConnection
              Configuration:
                ConnectionArn: !Ref CodeStarConnectionArn
                FullRepositoryId: !Ref GitHubRepo
                BranchName: !Ref GitHubBranch
                OutputArtifactFormat: CODEBUILD_CLONE_REF
              OutputArtifacts:
                - Name: HybridOs
              RunOrder: 1
        - Name: Build
          Actions:
            - Name: Build
              ActionTypeId:
                Category: Build
                Owner: AWS
                Version: "1"
                Provider: CodeBuild
              Configuration:
                ProjectName: !Ref BuildProject
              InputArtifacts:
                - Name: HybridOs
              OutputArtifacts:
                - Name: HybridOsBuild
              RunOrder: 1
        - Name: Test
          Actions:
            - Name: Test
              ActionTypeId:
                Category: Build
                Owner: AWS
                Version: "1"
                Provider: CodeBuild
              Configuration:
                ProjectName: !Ref TestProject
              InputArtifacts:
                - Name: HybridOsBuild
              OutputArtifacts:
                - Name: HybridOsTestResult
              RunOrder: 1
        - Name: Deploy
          Actions:
            - Name: Package
              ActionTypeId:
                Category: Build
                Owner: AWS
                Version: "1"
                Provider: CodeBuild
              Configuration:
                ProjectName: !Ref PackageProject
              InputArtifacts:
                - Name: HybridOsBuild
              OutputArtifacts:
                - Name: HybridOsPackageResult
              RunOrder: 1
            - Name: Docker
              ActionTypeId:
                Category: Build
                Owner: AWS
                Version: "1"
                Provider: CodeBuild
              Configuration:
                ProjectName: !Ref DockerProject
              InputArtifacts:
                - Name: HybridOsBuild
              OutputArtifacts:
                - Name: HybridOsDockerResult
              RunOrder: 1
